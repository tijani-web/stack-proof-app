[
  {
    "title": "Print numbers 1 to 5",
    "description": "Write a for loop that prints numbers 1 through 5 on separate lines",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "// Write your for loop here\n",
    "expectedOutput": "1\n2\n3\n4\n5"
  },
  {
    "title": "Countdown from 5",
    "description": "Create a loop that prints numbers 5 to 1 in descending order",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "// Initialize and write your countdown loop\n",
    "expectedOutput": "5\n4\n3\n2\n1"
  },
  {
    "title": "Even numbers under 10",
    "description": "Print all even numbers between 0 and 10 (exclusive) using a loop",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "// Write your even number loop\n",
    "expectedOutput": "0\n2\n4\n6\n8"
  },
  {
    "title": "Multiplication table",
    "description": "Print the 3 times table up to 3x5 using a loop (format: '3 x 1 = 3')",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "const multiplier = 3;\n// Write your multiplication table loop\n",
    "expectedOutput": "3 x 1 = 3\n3 x 2 = 6\n3 x 3 = 9\n3 x 4 = 12\n3 x 5 = 15"
  },
  {
    "title": "Sum of first N numbers",
    "description": "Calculate and print the sum of numbers from 1 to 5 using a loop",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "let sum = 0;\n// Write your summation loop\nconsole.log(sum);",
    "expectedOutput": "15"
  },
  {
    "title": "Simple greeting function",
    "description": "Create a function called 'greet' that takes a name and returns 'Hello [name]'",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "// Define your greet function here\nconsole.log(greet('Alice'));",
    "expectedOutput": "Hello Alice"
  },
  {
    "title": "Add two numbers",
    "description": "Write a function that takes two numbers and returns their sum",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "// Create your add function\nconsole.log(add(3, 7));",
    "expectedOutput": "10"
  },
  {
    "title": "Check even number",
    "description": "Write a function that returns true if a number is even, false otherwise",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "// Implement isEven function\nconsole.log(isEven(4));",
    "expectedOutput": "true"
  },
  {
    "title": "Square a number",
    "description": "Create a function that calculates and returns the square of a number",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "// Write your square function\nconsole.log(square(5));",
    "expectedOutput": "25"
  },
  {
    "title": "String length checker",
    "description": "Write a function that returns the length of a string without using .length property",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "// Implement manualLength function\nconsole.log(manualLength('hello'));",
    "expectedOutput": "5"
  },

  {
    "title": "Variable swap",
    "description": "Swap the values of two variables and print them",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Basics"],
    "starterCode": "let a = 5;\nlet b = 10;\n// Swap the values\nconsole.log(a, b);",
    "expectedOutput": "10 5"
  },
  {
    "title": "Temperature conversion",
    "description": "Convert Celsius (36.5) to Fahrenheit using the formula: F = C Ã— 9/5 + 32",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Basics"],
    "starterCode": "const celsius = 36.5;\n// Convert and print\n",
    "expectedOutput": "97.7"
  },
  {
    "title": "Simple math operations",
    "description": "Calculate and print the result of (8 + 2 * 5) / (1 + 3 * 2)",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Basics"],
    "starterCode": "// Calculate and print the result\n",
    "expectedOutput": "1.2857142857142858"
  },
  {
    "title": "Boolean logic",
    "description": "Print the result of (true && false) || (true && !false)",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Basics"],
    "starterCode": "// Evaluate and print the expression\n",
    "expectedOutput": "true"
  },
  {
    "title": "Type detection",
    "description": "Print the type of these values: 42, '42', true, null",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Beginner",
    "categories": ["Basics"],
    "starterCode": "// Print types on separate lines\n",
    "expectedOutput": "number\nstring\nboolean\nobject"
  },
  {
    "title": "Counter Factory",
    "description": "Create a function that generates counters each starting from different initial values",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Closures"],
    "starterCode": "function createCounter(start) {\n  // Implement counter factory\n}\nconst counter1 = createCounter(5);\nconst counter2 = createCounter(10);\nconsole.log(counter1(), counter1(), counter2());",
    "expectedOutput": "5 6 10"
  },
  {
    "title": "Private Variable",
    "description": "Use closure to create an object with truly private variables",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Closures"],
    "starterCode": "function createPerson(name) {\n  // Implement private variable\n}\nconst person = createPerson('Alice');\nconsole.log(person.getName());\nconsole.log(person.name);",
    "expectedOutput": "Alice\nundefined"
  },
  {
    "title": "Memoization",
    "description": "Implement memoization using closure for expensive function calls",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Closures"],
    "starterCode": "function memoize(fn) {\n  // Implement memoization\n}\nfunction expensive(n) { return n * 2; }\nconst memoized = memoize(expensive);\nconsole.log(memoized(5), memoized(5));",
    "expectedOutput": "10 10"
  },
  {
    "title": "Function Generator",
    "description": "Create a function generator that produces math operations using closures",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Closures"],
    "starterCode": "function operationGenerator(op) {\n  // Implement generator\n}\nconst add = operationGenerator('+');\nconsole.log(add(3)(5));",
    "expectedOutput": "8"
  },
  {
    "title": "Stack Implementation",
    "description": "Implement a stack data structure using closures with push/pop methods",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Closures"],
    "starterCode": "function createStack() {\n  // Implement stack\n}\nconst stack = createStack();\nstack.push(1);\nstack.push(2);\nconsole.log(stack.pop(), stack.pop());",
    "expectedOutput": "2 1"
  },

  {
    "title": "Promise All",
    "description": "Use Promise.all to wait for multiple promises to resolve",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Promises"],
    "starterCode": "const p1 = Promise.resolve(3);\nconst p2 = 42;\nconst p3 = new Promise((resolve) => {\n  // Implement Promise.all\n});\nPromise.all([p1, p2, p3]).then(console.log);",
    "expectedOutput": "[3, 42, \"foo\"]"
  },
  {
    "title": "Promise Race",
    "description": "Use Promise.race to get the first resolving promise",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Promises"],
    "starterCode": "const fast = new Promise((resolve) => {\n  setTimeout(() => resolve('fast'), 100);\n});\nconst slow = new Promise((resolve) => {\n  // Implement race\n});\nPromise.race([fast, slow]).then(console.log);",
    "expectedOutput": "fast"
  },
  {
    "title": "Promise Retry",
    "description": "Implement a retry mechanism for failed promises",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Promises"],
    "starterCode": "function retry(fn, retries) {\n  // Implement retry\n}\nretry(() => Promise.reject('error'), 3).catch(console.log);",
    "expectedOutput": "Retries exhausted"
  },
  {
    "title": "Promise Timeout",
    "description": "Create a promise that rejects if not resolved within timeout",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Promises"],
    "starterCode": "function timeoutPromise(promise, ms) {\n  // Implement timeout\n}\nconst slow = new Promise(resolve => setTimeout(resolve, 2000, 'slow'));\ntimeoutPromise(slow, 1000).catch(console.log);",
    "expectedOutput": "Timeout exceeded"
  },
  {
    "title": "Promise Chain",
    "description": "Chain promises where each step processes the previous result",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Promises"],
    "starterCode": "Promise.resolve(5)\n  // Implement chain\n  .then(x => x * 2)\n  .then(console.log);",
    "expectedOutput": "10"
  },

  {
    "title": "Async Error Handling",
    "description": "Handle errors in async/await using try/catch",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Async/Await"],
    "starterCode": "async function riskyOperation() {\n  throw new Error('Failed');\n}\n\nasync function run() {\n  // Implement error handling\n}\nrun();",
    "expectedOutput": "Caught error: Failed"
  },
  {
    "title": "Parallel Async",
    "description": "Execute multiple async operations in parallel",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Async/Await"],
    "starterCode": "async function fetchData(id) {\n  return `Data ${id}`;\n}\n\nasync function getAll() {\n  // Implement parallel execution\n}\ngetAll().then(console.log);",
    "expectedOutput": "[\"Data 1\", \"Data 2\", \"Data 3\"]"
  },
  {
    "title": "Async Sequence",
    "description": "Execute async operations in sequence",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Async/Await"],
    "starterCode": "async function wait(ms, value) {\n  return new Promise(resolve => setTimeout(resolve, ms, value));\n}\n\nasync function runSequence() {\n  // Implement sequential execution\n}\nrunSequence().then(console.log);",
    "expectedOutput": "[\"first\", \"second\", \"third\"]"
  },
  {
    "title": "Async Filter",
    "description": "Implement async array filter",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Async/Await"],
    "starterCode": "async function asyncFilter(array, predicate) {\n  // Implement async filter\n}\n\nconst numbers = [1, 2, 3, 4, 5];\nasyncFilter(numbers, async n => n % 2 === 0).then(console.log);",
    "expectedOutput": "[2, 4]"
  },
  {
    "title": "Async Reduce",
    "description": "Implement async array reduce",
    "language": "JavaScript",
    "defaultLanguage": "javascript",
    "judgeLanguageId": 63,
    "difficulty": "Advanced",
    "categories": ["Async/Await"],
    "starterCode": "async function asyncReduce(array, reducer, initial) {\n  // Implement async reduce\n}\n\nconst numbers = [1, 2, 3];\nasyncReduce(numbers, async (sum, n) => sum + n, 0).then(console.log);",
    "expectedOutput": "6"
  },
  {
    "title": "Number Pyramid",
    "description": "Print a number pyramid with 5 rows using nested loops",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "# Write your nested loops here\n",
    "expectedOutput": "1\n22\n333\n4444\n55555"
  },
  {
    "title": "Even Numbers",
    "description": "Print all even numbers between 10 and 20 using a while loop",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "num = 10\n# Write your while loop here\n",
    "expectedOutput": "10\n12\n14\n16\n18\n20"
  },
  {
    "title": "Multiplication Table",
    "description": "Print the multiplication table for 7 up to 7x10 using a for loop",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "# Write your for loop here\n",
    "expectedOutput": "7 x 1 = 7\n7 x 2 = 14\n7 x 3 = 21\n7 x 4 = 28\n7 x 5 = 35\n7 x 6 = 42\n7 x 7 = 49\n7 x 8 = 56\n7 x 9 = 63\n7 x 10 = 70"
  },
  {
    "title": "Count Vowels",
    "description": "Count and print the number of vowels in 'hello world' using a loop",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "word = 'hello world'\nvowels = 0\n# Write your loop here\nprint(vowels)",
    "expectedOutput": "3"
  },
  {
    "title": "Reverse String",
    "description": "Reverse the string 'python' using a loop (without slicing)",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "text = 'python'\nreversed_text = ''\n# Write your loop here\nprint(reversed_text)",
    "expectedOutput": "nohtyp"
  },
  {
    "title": "List Sum",
    "description": "Calculate and print the sum of [1, 2, 3, 4, 5]",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Lists"],
    "starterCode": "numbers = [1, 2, 3, 4, 5]\n# Calculate sum here\nprint(total)",
    "expectedOutput": "15"
  },
  {
    "title": "List Maximum",
    "description": "Find and print the maximum value in [8, 3, 12, 5, 9] without using max()",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Lists"],
    "starterCode": "numbers = [8, 3, 12, 5, 9]\nmax_num = numbers[0]\n# Find maximum here\nprint(max_num)",
    "expectedOutput": "12"
  },
  {
    "title": "Even Numbers Filter",
    "description": "Create a new list containing only even numbers from [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Lists"],
    "starterCode": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens = []\n# Filter even numbers here\nprint(evens)",
    "expectedOutput": "[2, 4, 6, 8, 10]"
  },
  {
    "title": "List Concatenation",
    "description": "Concatenate two lists [1, 2, 3] and [4, 5, 6] without using + operator",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Lists"],
    "starterCode": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n# Concatenate lists here\nprint(combined)",
    "expectedOutput": "[1, 2, 3, 4, 5, 6]"
  },
  {
    "title": "List Element Count",
    "description": "Count how many times 5 appears in [2, 5, 7, 5, 3, 5, 1]",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Lists"],
    "starterCode": "numbers = [2, 5, 7, 5, 3, 5, 1]\ncount = 0\n# Count occurrences here\nprint(count)",
    "expectedOutput": "3"
  },
  {
    "title": "Greeting Function",
    "description": "Write a function that takes a name and returns 'Hello, [name]!'",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "def greet(name):\n    # Implement function\n\nprint(greet('Alice'))",
    "expectedOutput": "Hello, Alice!"
  },
  {
    "title": "Area Calculator",
    "description": "Write a function that calculates and returns the area of a rectangle",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "def rectangle_area(length, width):\n    # Implement function\n\nprint(rectangle_area(5, 3))",
    "expectedOutput": "15"
  },
  {
    "title": "Prime Checker",
    "description": "Write a function that returns True if a number is prime, False otherwise",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "def is_prime(n):\n    # Implement function\n\nprint(is_prime(7), is_prime(4))",
    "expectedOutput": "True False"
  },
  {
    "title": "Factorial Function",
    "description": "Write a function that calculates the factorial of a number",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "def factorial(n):\n    # Implement function\n\nprint(factorial(5))",
    "expectedOutput": "120"
  },
  {
    "title": "String Repeater",
    "description": "Write a function that repeats a string n times with space separation",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "def repeat_string(s, n):\n    # Implement function\n\nprint(repeat_string('hi', 3))",
    "expectedOutput": "hi hi hi"
  },
  {
    "title": "Word Frequency",
    "description": "Count word frequencies in 'apple banana apple orange banana apple'",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["Dictionaries"],
    "starterCode": "text = 'apple banana apple orange banana apple'\n# Count word frequencies\nprint(freq)",
    "expectedOutput": "{'apple': 3, 'banana': 2, 'orange': 1}"
  },
  {
    "title": "Dictionary Merge",
    "description": "Merge two dictionaries {'a': 1, 'b': 2} and {'c': 3, 'd': 4}",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["Dictionaries"],
    "starterCode": "dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n# Merge dictionaries\nprint(merged)",
    "expectedOutput": "{'a': 1, 'b': 2, 'c': 3, 'd': 4}"
  },
  {
    "title": "Key Value Swapper",
    "description": "Swap keys and values in {'a': 1, 'b': 2, 'c': 3}",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["Dictionaries"],
    "starterCode": "original = {'a': 1, 'b': 2, 'c': 3}\n# Swap keys and values\nprint(swapped)",
    "expectedOutput": "{1: 'a', 2: 'b', 3: 'c'}"
  },
  {
    "title": "Dictionary Comprehension",
    "description": "Create a dictionary of squares for numbers 1 through 5 using comprehension",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["Dictionaries"],
    "starterCode": "# Create dictionary using comprehension\nprint(squares)",
    "expectedOutput": "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}"
  },
  {
    "title": "Nested Dictionary Access",
    "description": "Access the value 5 in {'a': {'b': {'c': 5}}}",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["Dictionaries"],
    "starterCode": "data = {'a': {'b': {'c': 5}}}\n# Access the value\nprint(value)",
    "expectedOutput": "5"
  },
  {
    "title": "File Line Count",
    "description": "Count the number of lines in a file (simulate with StringIO)",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["File Handling"],
    "starterCode": "from io import StringIO\nfile_content = StringIO('line1\\nline2\\nline3')\n# Count lines\nprint(count)",
    "expectedOutput": "3"
  },
  {
    "title": "CSV Data Extraction",
    "description": "Extract the second column from CSV data (simulate with StringIO)",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["File Handling"],
    "starterCode": "import csv\nfrom io import StringIO\ncsv_data = StringIO('a,1\\nb,2\\nc,3')\n# Extract second column\nprint(column)",
    "expectedOutput": "['1', '2', '3']"
  },
  {
    "title": "File Content Reversal",
    "description": "Reverse the order of lines in a file (simulate with StringIO)",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["File Handling"],
    "starterCode": "from io import StringIO\nfile_content = StringIO('first\\nsecond\\nthird')\n# Reverse lines\nprint(reversed_lines)",
    "expectedOutput": "['third', 'second', 'first']"
  },
  {
    "title": "Word Count in File",
    "description": "Count words in file content (simulate with StringIO)",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["File Handling"],
    "starterCode": "from io import StringIO\nfile_content = StringIO('hello world\\ngoodbye world')\n# Count words\nprint(count)",
    "expectedOutput": "4"
  },
  {
    "title": "File Extension Extractor",
    "description": "Extract file extensions from filenames in a list",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["File Handling"],
    "starterCode": "filenames = ['file1.txt', 'image.jpg', 'document.pdf']\n# Extract extensions\nprint(extensions)",
    "expectedOutput": "['txt', 'jpg', 'pdf']"
  },
  {
    "title": "Class Creation",
    "description": "Create a Circle class with area calculation",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Circle:\n    # Implement class\n\nc = Circle(5)\nprint(c.area())",
    "expectedOutput": "78.53981633974483"
  },
  {
    "title": "Inheritance",
    "description": "Create an Animal base class and Dog subclass",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Animal:\n    # Implement base class\n\nclass Dog(Animal):\n    # Implement subclass\n\nd = Dog()\nprint(d.speak())",
    "expectedOutput": "Woof!"
  },
  {
    "title": "Class Method",
    "description": "Implement a class method to create instances from strings",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Person:\n    # Implement class with from_string method\n\np = Person.from_string('John,25')\nprint(p.age)",
    "expectedOutput": "25"
  },
  {
    "title": "Property Decorator",
    "description": "Use @property to create a read-only attribute",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Temperature:\n    # Implement with property\n\nt = Temperature(20)\nprint(t.fahrenheit)",
    "expectedOutput": "68.0"
  },
  {
    "title": "String Representation",
    "description": "Implement __str__ and __repr__ for a Book class",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Book:\n    # Implement string methods\n\nb = Book('Python', 'Guido')\nprint(str(b))",
    "expectedOutput": "Python by Guido"
  },
  {
    "title": "Recursive Factorial",
    "description": "Implement factorial using recursion",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Recursion"],
    "starterCode": "def factorial(n):\n    # Implement recursively\n\nprint(factorial(5))",
    "expectedOutput": "120"
  },
  {
    "title": "Fibonacci Sequence",
    "description": "Generate nth Fibonacci number recursively",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Recursion"],
    "starterCode": "def fibonacci(n):\n    # Implement recursively\n\nprint(fibonacci(7))",
    "expectedOutput": "13"
  },
  {
    "title": "Recursive Sum",
    "description": "Calculate sum of list elements recursively",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Recursion"],
    "starterCode": "def recursive_sum(lst):\n    # Implement recursively\n\nprint(recursive_sum([1, 2, 3, 4]))",
    "expectedOutput": "10"
  },
  {
    "title": "Power Function",
    "description": "Implement power function recursively (x^n)",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Recursion"],
    "starterCode": "def power(x, n):\n    # Implement recursively\n\nprint(power(2, 5))",
    "expectedOutput": "32"
  },
  {
    "title": "Flatten List",
    "description": "Flatten a nested list recursively",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Recursion"],
    "starterCode": "def flatten(lst):\n    # Implement recursively\n\nprint(flatten([1, [2, [3, 4], 5]))",
    "expectedOutput": "[1, 2, 3, 4, 5]"
  },

  {
  "title": "Random Integer Generator",
  "description": "Use the random module to generate a list of 3 random integers between 1 and 10",
  "language": "Python",
  "defaultLanguage": "python",
  "judgeLanguageId": 71,
  "difficulty": "Advanced",
  "categories": ["Modules"],
  "starterCode": "import random\n\n# Generate random numbers here\nprint(numbers)",
  "expectedOutput": "[3, 7, 2]"
  },
  {
    "title": "Dynamic Import",
    "description": "Import a module dynamically using importlib",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Modules"],
    "starterCode": "import importlib\n\n# Dynamically import math module\nmath = importlib.import_module('math')\nprint(math.sqrt(16))",
    "expectedOutput": "4.0"
  },
  {
  "title": "Datetime Formatting",
  "description": "Print the current date in 'YYYY-MM-DD' format using the datetime module",
  "language": "Python",
  "defaultLanguage": "python",
  "judgeLanguageId": 71,
  "difficulty": "Advanced",
  "categories": ["Modules"],
  "starterCode": "from datetime import datetime\n\n# Format the date here\nprint(formatted_date)",
  "expectedOutput": "2025-08-02"
  },
  {
    "title": "Module Inspection",
    "description": "Inspect module contents using dir()",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Modules"],
    "starterCode": "import math\n\n# Get sorted list of math module attributes\nattrs = [a for a in dir(math) if not a.startswith('_')]\nprint(sorted(attrs)[:3])",
    "expectedOutput": "['acos', 'acosh', 'asin']"
  },
  {
  "title": "Math Constants",
  "description": "Use the math module to print the values of pi and e, rounded to 4 decimal places",
  "language": "Python",
  "defaultLanguage": "python",
  "judgeLanguageId": 71,
  "difficulty": "Advanced",
  "categories": ["Modules"],
  "starterCode": "import math\n\n# Print rounded values\nprint(round(math.pi, 4), round(math.e, 4))",
  "expectedOutput": "3.1416 2.7183"
  },
  {
    "title": "Custom Exception",
    "description": "Create and raise a custom exception",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Exceptions"],
    "starterCode": "class NegativeNumberError(Exception):\n    pass\n\ndef process(n):\n    if n < 0:\n        raise NegativeNumberError('Negative not allowed')\n    return n * 2\n\ntry:\n    print(process(-5))\nexcept NegativeNumberError as e:\n    print(str(e))",
    "expectedOutput": "Negative not allowed"
  },
  {
    "title": "Exception Chain",
    "description": "Demonstrate exception chaining with raise from",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Exceptions"],
    "starterCode": "try:\n    try:\n        1 / 0\n    except ZeroDivisionError as e:\n        raise ValueError('Invalid math') from e\nexcept ValueError as e:\n    print(str(e))\n    print(e.__cause__)",
    "expectedOutput": "Invalid math\ndivision by zero"
  },
  {
    "title": "Context Manager",
    "description": "Implement a context manager for file handling",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Exceptions"],
    "starterCode": "class FileHandler:\n    def __init__(self, filename, mode):\n        self.filename = filename\n        self.mode = mode\n    \n    def __enter__(self):\n        self.file = open(self.filename, self.mode)\n        return self.file\n    \n    def __exit__(self, exc_type, exc_val, exc_tb):\n        self.file.close()\n\nwith FileHandler('test.txt', 'w') as f:\n    f.write('success')\n\nprint('File closed')",
    "expectedOutput": "File closed"
  },
  {
    "title": "Multiple Exception Handling",
    "description": "Handle multiple exception types in one except clause",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Exceptions"],
    "starterCode": "def process(value):\n    try:\n        return int(value) * 2\n    except (ValueError, TypeError) as e:\n        return f'Error: {type(e).__name__}'\n\nprint(process('10'), process('abc'))",
    "expectedOutput": "20 Error: ValueError"
  },
  {
    "title": "Finally Block",
    "description": "Demonstrate finally block execution",
    "language": "Python",
    "defaultLanguage": "python",
    "judgeLanguageId": 71,
    "difficulty": "Advanced",
    "categories": ["Exceptions"],
    "starterCode": "def test():\n    try:\n        return 'try'\n    finally:\n        print('finally')\n\nprint(test())",
    "expectedOutput": "finally\ntry"
  },
  {
    "title": "Number Printer",
    "description": "Print numbers 1 through 5 using a for loop",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    // Write your for loop here\n  }\n}",
    "expectedOutput": "1\n2\n3\n4\n5"
  },
  {
    "title": "Even Numbers",
    "description": "Print even numbers between 0 and 10 using a while loop",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    int i = 0;\n    // Write your while loop here\n  }\n}",
    "expectedOutput": "0\n2\n4\n6\n8\n10"
  },
  {
    "title": "Multiplication Table",
    "description": "Print the 5 times table up to 5x10 using nested loops",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    // Write your nested loops here\n  }\n}",
    "expectedOutput": "5 x 1 = 5\n5 x 2 = 10\n5 x 3 = 15\n5 x 4 = 20\n5 x 5 = 25\n5 x 6 = 30\n5 x 7 = 35\n5 x 8 = 40\n5 x 9 = 45\n5 x 10 = 50"
  },
  {
    "title": "Sum of Digits",
    "description": "Calculate the sum of digits of 12345 using a loop",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    int num = 12345;\n    int sum = 0;\n    // Write your loop here\n    System.out.println(sum);\n  }\n}",
    "expectedOutput": "15"
  },
  {
    "title": "Pattern Printer",
    "description": "Print a right triangle pattern with 5 rows using nested loops",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Loops"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    // Write your nested loops here\n  }\n}",
    "expectedOutput": "*\n**\n***\n****\n*****"
  },
  {
    "title": "String Reversal",
    "description": "Reverse the string 'hello' without using built-in reverse methods",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Strings"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    String str = \"hello\";\n    // Reverse the string\n    System.out.println(reversed);\n  }\n}",
    "expectedOutput": "olleh"
  },
  {
    "title": "Palindrome Check",
    "description": "Check if 'madam' is a palindrome (return true or false)",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Strings"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    String str = \"madam\";\n    // Check palindrome\n    System.out.println(isPalindrome);\n  }\n}",
    "expectedOutput": "true"
  },
  {
    "title": "Vowel Counter",
    "description": "Count the number of vowels in 'programming'",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Strings"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    String str = \"programming\";\n    int count = 0;\n    // Count vowels\n    System.out.println(count);\n  }\n}",
    "expectedOutput": "3"
  },
  {
    "title": "String Concatenation",
    "description": "Concatenate 'Hello' and 'World' with a space in between",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Strings"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    String s1 = \"Hello\";\n    String s2 = \"World\";\n    // Concatenate strings\n    System.out.println(result);\n  }\n}",
    "expectedOutput": "Hello World"
  },
  {
    "title": "Substring Extraction",
    "description": "Extract 'quick' from 'The quick brown fox'",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Strings"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    String str = \"The quick brown fox\";\n    // Extract substring\n    System.out.println(sub);\n  }\n}",
    "expectedOutput": "quick"
  },
  {
    "title": "Sum Function",
    "description": "Create a method that returns the sum of two integers",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "public class Main {\n  // Create your sum method here\n  \n  public static void main(String[] args) {\n    System.out.println(sum(3, 5));\n  }\n}",
    "expectedOutput": "8"
  },
  {
    "title": "Factorial Method",
    "description": "Write a recursive method to calculate factorial of 5",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "public class Main {\n  // Implement factorial method\n  \n  public static void main(String[] args) {\n    System.out.println(factorial(5));\n  }\n}",
    "expectedOutput": "120"
  },
  {
    "title": "Prime Checker",
    "description": "Write a method that checks if 7 is prime",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "public class Main {\n  // Implement isPrime method\n  \n  public static void main(String[] args) {\n    System.out.println(isPrime(7));\n  }\n}",
    "expectedOutput": "true"
  },
  {
    "title": "Max of Three",
    "description": "Write a method that finds the maximum of three numbers (3, 7, 5)",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "public class Main {\n  // Implement maxOfThree method\n  \n  public static void main(String[] args) {\n    System.out.println(maxOfThree(3, 7, 5));\n  }\n}",
    "expectedOutput": "7"
  },
  {
    "title": "Greeting Method",
    "description": "Create a method that returns 'Hello, Alice!' when passed 'Alice'",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Beginner",
    "categories": ["Functions"],
    "starterCode": "public class Main {\n  // Implement greet method\n  \n  public static void main(String[] args) {\n    System.out.println(greet(\"Alice\"));\n  }\n}",
    "expectedOutput": "Hello, Alice!"
  },
  {
    "title": "Class Creation",
    "description": "Create a Circle class with radius and area calculation",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Circle {\n  // Implement class\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Circle c = new Circle(5);\n    System.out.println(c.getArea());\n  }\n}",
    "expectedOutput": "78.53981633974483"
  },
  {
    "title": "Inheritance",
    "description": "Create Animal superclass and Dog subclass that overrides makeSound()",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Animal {\n  // Implement superclass\n}\n\nclass Dog extends Animal {\n  // Implement subclass\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Dog d = new Dog();\n    System.out.println(d.makeSound());\n  }\n}",
    "expectedOutput": "Woof!"
  },
  {
    "title": "Encapsulation",
    "description": "Create a Person class with private name and public getter/setter",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Person {\n  // Implement encapsulated class\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Person p = new Person();\n    p.setName(\"Alice\");\n    System.out.println(p.getName());\n  }\n}",
    "expectedOutput": "Alice"
  },
  {
    "title": "Polymorphism",
    "description": "Demonstrate method overloading with print methods for int and String",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Printer {\n  // Implement overloaded methods\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Printer p = new Printer();\n    p.print(5);\n    p.print(\"five\");\n  }\n}",
    "expectedOutput": "5\nfive"
  },
  {
    "title": "Static Members",
    "description": "Create a Counter class with static count variable",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["OOP"],
    "starterCode": "class Counter {\n  // Implement static counter\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    new Counter();\n    new Counter();\n    System.out.println(Counter.getCount());\n  }\n}",
    "expectedOutput": "2"
  },
  {
    "title": "ArrayList Operations",
    "description": "Create an ArrayList of Strings and add/remove elements",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["Collections"],
    "starterCode": "import java.util.ArrayList;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<String> list = new ArrayList<>();\n    // Add \"Apple\" and \"Banana\", then remove \"Apple\"\n    System.out.println(list);\n  }\n}",
    "expectedOutput": "[Banana]"
  },
  {
    "title": "HashMap Usage",
    "description": "Create a HashMap storing age by name (Alice:25, Bob:30)",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["Collections"],
    "starterCode": "import java.util.HashMap;\n\npublic class Main {\n  public static void main(String[] args) {\n    // Create and populate HashMap\n    System.out.println(ages.get(\"Alice\"));\n  }\n}",
    "expectedOutput": "25"
  },
  {
    "title": "LinkedList Reverse",
    "description": "Reverse a LinkedList containing [1, 2, 3]",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["Collections"],
    "starterCode": "import java.util.LinkedList;\nimport java.util.Collections;\n\npublic class Main {\n  public static void main(String[] args) {\n    LinkedList<Integer> list = new LinkedList<>();\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    // Reverse the list\n    System.out.println(list);\n  }\n}",
    "expectedOutput": "[3, 2, 1]"
  },
  {
    "title": "HashSet Operations",
    "description": "Demonstrate HashSet uniqueness by adding duplicate elements",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["Collections"],
    "starterCode": "import java.util.HashSet;\n\npublic class Main {\n  public static void main(String[] args) {\n    HashSet<String> set = new HashSet<>();\n    set.add(\"apple\");\n    set.add(\"apple\");\n    set.add(\"banana\");\n    System.out.println(set.size());\n  }\n}",
    "expectedOutput": "2"
  },
  {
    "title": "Iterator Usage",
    "description": "Use an Iterator to print all elements in [10, 20, 30]",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["Collections"],
    "starterCode": "import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Main {\n  public static void main(String[] args) {\n    ArrayList<Integer> numbers = new ArrayList<>();\n    numbers.add(10);\n    numbers.add(20);\n    numbers.add(30);\n    // Use iterator to print\n  }\n}",
    "expectedOutput": "10\n20\n30"
  },
  {
    "title": "File Writing",
    "description": "Write 'Hello World' to a file (simulated output)",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "import java.io.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    try (PrintWriter writer = new PrintWriter(\"output.txt\")) {\n      writer.println(\"Hello World\");\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n    System.out.println(\"File written successfully\");\n  }\n}",
    "expectedOutput": "File written successfully"
  },
  {
    "title": "File Reading",
    "description": "Read first line from a file (simulated with StringReader)",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "import java.io.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    String content = \"First line\\nSecond line\";\n    try (BufferedReader reader = new BufferedReader(new StringReader(content))) {\n      System.out.println(reader.readLine());\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}",
    "expectedOutput": "First line"
  },
  {
    "title": "File Copy",
    "description": "Simulate copying file content from source to destination",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "import java.io.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    String sourceContent = \"Sample content\";\n    try (Reader reader = new StringReader(sourceContent);\n         Writer writer = new StringWriter()) {\n      int character;\n      while ((character = reader.read()) != -1) {\n        writer.write(character);\n      }\n      System.out.println(writer.toString());\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}",
    "expectedOutput": "Sample content"
  },
  {
    "title": "Serialization",
    "description": "Serialize and deserialize a simple object (simulated)",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "import java.io.*;\n\nclass Data implements Serializable {\n  int value = 42;\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Data data = new Data();\n    try (ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos)) {\n      oos.writeObject(data);\n      ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n      ObjectInputStream ois = new ObjectInputStream(bais);\n      Data loaded = (Data) ois.readObject();\n      System.out.println(loaded.value);\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n}",
    "expectedOutput": "42"
  },
  {
    "title": "File Metadata",
    "description": "Print simulated file size (1KB) and last modified time",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "import java.io.File;\n\npublic class Main {\n  public static void main(String[] args) {\n    File file = new File(\"example.txt\") {\n      @Override\n      public long length() { return 1024; }\n      @Override\n      public long lastModified() { return 1625097600000L; }\n    };\n    System.out.println(file.length() + \" bytes\");\n    System.out.println(new java.util.Date(file.lastModified()));\n  }\n}",
    "expectedOutput": "1024 bytes\nSat Jun 30 00:00:00 UTC 2021"
  },
  {
    "title": "Custom Exception",
    "description": "Create and throw a custom InvalidAgeException",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Exception Handling"],
    "starterCode": "class InvalidAgeException extends Exception {\n  public InvalidAgeException(String message) {\n    super(message);\n  }\n}\n\npublic class Main {\n  static void validateAge(int age) throws InvalidAgeException {\n    if (age < 0) throw new InvalidAgeException(\"Age cannot be negative\");\n  }\n  \n  public static void main(String[] args) {\n    try {\n      validateAge(-5);\n    } catch (InvalidAgeException e) {\n      System.out.println(e.getMessage());\n    }\n  }\n}",
    "expectedOutput": "Age cannot be negative"
  },
  {
    "title": "Multiple Catch Blocks",
    "description": "Handle ArithmeticException and ArrayIndexOutOfBoundsException differently",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Exception Handling"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    try {\n      int result = 10 / 0;\n      int[] arr = new int[5];\n      arr[10] = 5;\n    } catch (ArithmeticException e) {\n      System.out.println(\"Division error\");\n    } catch (ArrayIndexOutOfBoundsException e) {\n      System.out.println(\"Array index error\");\n    }\n  }\n}",
    "expectedOutput": "Division error"
  },
  {
    "title": "Finally Block",
    "description": "Demonstrate finally block execution after exception",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Exception Handling"],
    "starterCode": "public class Main {\n  public static void main(String[] args) {\n    try {\n      System.out.println(10 / 0);\n    } catch (ArithmeticException e) {\n      System.out.println(\"Exception caught\");\n    } finally {\n      System.out.println(\"Finally executed\");\n    }\n  }\n}",
    "expectedOutput": "Exception caught\nFinally executed"
  },
  {
    "title": "Try-With-Resources",
    "description": "Demonstrate automatic resource management with BufferedReader",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Exception Handling"],
    "starterCode": "import java.io.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    String data = \"sample\";\n    try (BufferedReader reader = new BufferedReader(new StringReader(data))) {\n      System.out.println(reader.readLine());\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}",
    "expectedOutput": "sample"
  },
  {
    "title": "Exception Propagation",
    "description": "Demonstrate exception propagation through method calls",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Exception Handling"],
    "starterCode": "public class Main {\n  static void method1() { method2(); }\n  static void method2() { System.out.println(10 / 0); }\n  \n  public static void main(String[] args) {\n    try {\n      method1();\n    } catch (ArithmeticException e) {\n      System.out.println(\"Caught in main\");\n    }\n  }\n}",
    "expectedOutput": "Caught in main"
  },
  {
    "title": "Thread Creation",
    "description": "Create and start a thread that prints 'Hello from thread'",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Multithreading"],
    "starterCode": "class MyThread extends Thread {\n  public void run() {\n    System.out.println(\"Hello from thread\");\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    MyThread thread = new MyThread();\n    thread.start();\n  }\n}",
    "expectedOutput": "Hello from thread"
  },
  {
    "title": "Runnable Interface",
    "description": "Implement Runnable interface to print numbers 1-5 in a thread",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Multithreading"],
    "starterCode": "class NumberPrinter implements Runnable {\n  public void run() {\n    // Print numbers 1-5\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Thread thread = new Thread(new NumberPrinter());\n    thread.start();\n  }\n}",
    "expectedOutput": "1\n2\n3\n4\n5"
  },
  {
    "title": "Thread Synchronization",
    "description": "Demonstrate synchronized method for counter increment",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Multithreading"],
    "starterCode": "class Counter {\n  private int count = 0;\n  \n  public synchronized void increment() {\n    count++;\n  }\n  \n  public int getCount() { return count; }\n}\n\npublic class Main {\n  public static void main(String[] args) throws InterruptedException {\n    Counter counter = new Counter();\n    \n    Thread t1 = new Thread(() -> {\n      for (int i = 0; i < 1000; i++) counter.increment();\n    });\n    \n    Thread t2 = new Thread(() -> {\n      for (int i = 0; i < 1000; i++) counter.increment();\n    });\n    \n    t1.start();\n    t2.start();\n    t1.join();\n    t2.join();\n    \n    System.out.println(counter.getCount());\n  }\n}",
    "expectedOutput": "2000"
  },
  {
    "title": "Thread Pool",
    "description": "Use ExecutorService to execute 3 tasks in a thread pool",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Multithreading"],
    "starterCode": "import java.util.concurrent.*;\n\npublic class Main {\n  public static void main(String[] args) {\n    ExecutorService executor = Executors.newFixedThreadPool(3);\n    \n    for (int i = 1; i <= 3; i++) {\n      final int taskId = i;\n      executor.execute(() -> {\n        System.out.println(\"Task \" + taskId + \" executed\");\n      });\n    }\n    \n    executor.shutdown();\n  }\n}",
    "expectedOutput": "Task 1 executed\nTask 2 executed\nTask 3 executed"
  },
  {
    "title": "Future and Callable",
    "description": "Use Callable with Future to get result from a thread",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Multithreading"],
    "starterCode": "import java.util.concurrent.*;\n\npublic class Main {\n  public static void main(String[] args) throws Exception {\n    ExecutorService executor = Executors.newSingleThreadExecutor();\n    Future<Integer> future = executor.submit(() -> {\n      return 5 * 5;\n    });\n    \n    System.out.println(future.get());\n    executor.shutdown();\n  }\n}",
    "expectedOutput": "25"
  },
  {
    "title": "Method Overriding",
    "description": "Override toString() in Person class to return 'Person: [name]'",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Inheritance"],
    "starterCode": "class Person {\n  String name;\n  Person(String name) { this.name = name; }\n  // Override toString\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Person p = new Person(\"Alice\");\n    System.out.println(p);\n  }\n}",
    "expectedOutput": "Person: Alice"
  },
  {
    "title": "Abstract Class",
    "description": "Create abstract Shape class with concrete Circle implementation",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Inheritance"],
    "starterCode": "abstract class Shape {\n  abstract double area();\n}\n\nclass Circle extends Shape {\n  double radius;\n  Circle(double r) { radius = r; }\n  // Implement area\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Shape s = new Circle(5);\n    System.out.println(s.area());\n  }\n}",
    "expectedOutput": "78.53981633974483"
  },
  {
    "title": "Interface Implementation",
    "description": "Create Drawable interface and implement it in Circle class",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Inheritance"],
    "starterCode": "interface Drawable {\n  String draw();\n}\n\nclass Circle implements Drawable {\n  // Implement draw\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Drawable d = new Circle();\n    System.out.println(d.draw());\n  }\n}",
    "expectedOutput": "Drawing a circle"
  },
  {
    "title": "Multiple Inheritance",
    "description": "Demonstrate multiple interface implementation",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Inheritance"],
    "starterCode": "interface Walkable { String walk(); }\ninterface Swimable { String swim(); }\n\nclass Duck implements Walkable, Swimable {\n  // Implement both methods\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Duck d = new Duck();\n    System.out.println(d.walk() + \" and \" + d.swim());\n  }\n}",
    "expectedOutput": "Walking and Swimming"
  },
  {
    "title": "Super Keyword",
    "description": "Use super to call parent class constructor and method",
    "language": "Java",
    "defaultLanguage": "java",
    "judgeLanguageId": 62,
    "difficulty": "Advanced",
    "categories": ["Inheritance"],
    "starterCode": "class Animal {\n  String sound;\n  Animal(String s) { sound = s; }\n  String makeSound() { return sound; }\n}\n\nclass Dog extends Animal {\n  Dog() { super(\"Woof\"); }\n  String makeSound() {\n    return super.makeSound() + \"!\";\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    Dog d = new Dog();\n    System.out.println(d.makeSound());\n  }\n}",
    "expectedOutput": "Woof!"
  },
  
    {
      "title": "Print Numbers 1-10",
      "description": "Use a for loop to print numbers 1 through 10, space-separated.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your loop here\n    return 0;\n}",
      "expectedOutput": "1 2 3 4 5 6 7 8 9 10"
    },
    {
      "title": "Sum of Even Numbers",
      "description": "Calculate and print the sum of even numbers between 1 and 20.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int sum = 0;\n    // Your loop here\n    cout << sum;\n    return 0;\n}",
      "expectedOutput": "110"
    },
    {
      "title": "Multiplication Table",
      "description": "Print the multiplication table for 5 (1x5 to 10x5), each on new line.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your loop here\n    return 0;\n}",
      "expectedOutput": "5\n10\n15\n20\n25\n30\n35\n40\n45\n50"
    },
    {
      "title": "Print Odd Numbers",
      "description": "Print all odd numbers between 1 and 20, space-separated.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Your loop here\n    return 0;\n}",
      "expectedOutput": "1 3 5 7 9 11 13 15 17 19"
    },
    {
      "title": "Count Vowels",
      "description": "Count and print the number of vowels in 'programming'.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string word = \"programming\";\n    int count = 0;\n    // Your loop here\n    cout << count;\n    return 0;\n}",
      "expectedOutput": "3"
    },
    {
      "title": "Greet Function",
      "description": "Create a void function that prints 'Hello, World!' when called.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define function here\n\nint main() {\n    // Call function\n    return 0;\n}",
      "expectedOutput": "Hello, World!"
    },
    {
      "title": "Add Two Numbers",
      "description": "Create a function that takes two integers and returns their sum.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define function here\n\nint main() {\n    cout << add(5, 3);\n    return 0;\n}",
      "expectedOutput": "8"
    },
    {
      "title": "Factorial Function",
      "description": "Create a function that calculates factorial of a number.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define function here\n\nint main() {\n    cout << factorial(5);\n    return 0;\n}",
      "expectedOutput": "120"
    },
    {
      "title": "Is Even Function",
      "description": "Create a function that returns true if number is even, false otherwise.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define function here\n\nint main() {\n    cout << boolalpha << isEven(4);\n    return 0;\n}",
      "expectedOutput": "true"
    },
    {
      "title": "Max of Two",
      "description": "Create a function that returns the larger of two numbers.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define function here\n\nint main() {\n    cout << max(7, 12);\n    return 0;\n}",
      "expectedOutput": "12"
    },
    {
      "title": "Pointer Basics",
      "description": "Create an integer variable and pointer to it. Print value via pointer.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Pointers"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num = 42;\n    // Your pointer code here\n    return 0;\n}",
      "expectedOutput": "42"
    },
    {
      "title": "Swap with Pointers",
      "description": "Swap two integers using pointers.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Pointers"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 5, b = 10;\n    // Your pointer swap here\n    cout << a << \" \" << b;\n    return 0;\n}",
      "expectedOutput": "10 5"
    },
    {
      "title": "Pointer Arithmetic",
      "description": "Create an array and use pointer arithmetic to print its elements.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Pointers"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[3] = {10, 20, 30};\n    // Your pointer code here\n    return 0;\n}",
      "expectedOutput": "10 20 30"
    },
    {
      "title": "String Pointer",
      "description": "Print a string using a pointer to its first character.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Pointers"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    char str[] = \"Hello\";\n    // Your pointer code here\n    return 0;\n}",
      "expectedOutput": "Hello"
    },
    {
      "title": "Pointer to Pointer",
      "description": "Create a pointer to another pointer and print the final value.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Beginner",
      "categories": ["Pointers"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int num = 42;\n    // Your pointer to pointer here\n    return 0;\n}",
      "expectedOutput": "42"
    },
    {
      "title": "Create a Point Struct",
      "description": "Define a struct 'Point' with x and y coordinates, then create and print a Point(3,4).",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define struct here\n\nint main() {\n    // Create and print point\n    return 0;\n}",
      "expectedOutput": "3 4"
    },
    {
      "title": "Struct Rectangle Area",
      "description": "Create a Rectangle struct with width/height and calculate its area.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define struct here\n\nint main() {\n    Rectangle r = {5, 3};\n    // Calculate and print area\n    return 0;\n}",
      "expectedOutput": "15"
    },
    {
      "title": "Student Struct",
      "description": "Create a Student struct with name and GPA, then print student data.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <iostream>\n#include <string>\nusing namespace std;\n\n// Define struct here\n\nint main() {\n    Student s = {\"Alice\", 3.8};\n    // Print student data\n    return 0;\n}",
      "expectedOutput": "Alice 3.8"
    },
    {
      "title": "Nested Structs",
      "description": "Create a Circle struct containing a Point center, then print its center coordinates.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define structs here\n\nint main() {\n    Circle c = {{2, 5}, 10};\n    // Print center coordinates\n    return 0;\n}",
      "expectedOutput": "2 5"
    },
    {
      "title": "Struct Array",
      "description": "Create an array of 3 Points and print their coordinates.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define struct here\n\nint main() {\n    Point points[3] = {{1,2}, {3,4}, {5,6}};\n    // Print all points\n    return 0;\n}",
      "expectedOutput": "1 2\n3 4\n5 6"
    },
    {
      "title": "Reverse Array",
      "description": "Reverse an array of integers and print the result.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Arrays"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    // Reverse and print array\n    return 0;\n}",
      "expectedOutput": "5 4 3 2 1"
    },
    {
      "title": "Find Maximum",
      "description": "Find and print the maximum value in an integer array.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Arrays"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[] = {12, 5, 27, 8, 15};\n    // Find and print max\n    return 0;\n}",
      "expectedOutput": "27"
    },
    {
      "title": "Array Sum",
      "description": "Calculate and print the sum of all elements in a 2D array.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Arrays"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int matrix[2][3] = {{1,2,3}, {4,5,6}};\n    // Calculate and print sum\n    return 0;\n}",
      "expectedOutput": "21"
    },
    {
      "title": "Count Occurrences",
      "description": "Count how many times a number appears in an array.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Arrays"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[] = {2, 5, 2, 7, 2, 8};\n    int target = 2;\n    // Count and print occurrences\n    return 0;\n}",
      "expectedOutput": "3"
    },
    {
      "title": "Merge Arrays",
      "description": "Merge two sorted arrays into one sorted array and print it.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Intermediate",
      "categories": ["Arrays"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr1[] = {1, 3, 5};\n    int arr2[] = {2, 4, 6};\n    // Merge and print result\n    return 0;\n}",
      "expectedOutput": "1 2 3 4 5 6"
    },
    {
      "title": "Bank Account Class",
      "description": "Create a BankAccount class with deposit/withdraw methods and test it.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["OOP"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define class here\n\nint main() {\n    BankAccount acc(100);\n    acc.deposit(50);\n    acc.withdraw(30);\n    cout << acc.getBalance();\n    return 0;\n}",
      "expectedOutput": "120"
    },
    {
      "title": "Inheritance",
      "description": "Create a base Shape class and derived Circle class with area calculation.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["OOP"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define classes here\n\nint main() {\n    Circle c(5);\n    cout << c.area();\n    return 0;\n}",
      "expectedOutput": "78.5"
    },
    {
      "title": "Polymorphism",
      "description": "Implement runtime polymorphism with a base Animal class and derived Dog/Cat classes.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["OOP"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define classes here\n\nint main() {\n    Animal* a = new Dog();\n    cout << a->sound();\n    delete a;\n    return 0;\n}",
      "expectedOutput": "Woof"
    },
    {
      "title": "Operator Overloading",
      "description": "Overload the + operator for a Vector class that adds two vectors.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["OOP"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define class here\n\nint main() {\n    Vector v1(1,2), v2(3,4);\n    Vector v3 = v1 + v2;\n    cout << v3.x << \" \" << v3.y;\n    return 0;\n}",
      "expectedOutput": "4 6"
    },
    {
      "title": "Template Class",
      "description": "Create a template class Box that can hold any type and print its content.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["OOP"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define template class here\n\nint main() {\n    Box<int> intBox(42);\n    cout << intBox.getContent();\n    return 0;\n}",
      "expectedOutput": "42"
    },
    {
      "title": "Dynamic Array Allocation",
      "description": "Allocate an integer array of size 5 dynamically, initialize with 1-5, then print and deallocate.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Memory Management"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // Allocate array\n    // Initialize and print\n    // Deallocate\n    return 0;\n}",
      "expectedOutput": "1 2 3 4 5"
    },
    {
      "title": "Smart Pointer",
      "description": "Create a shared_ptr<int> with value 42 and print its value.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Memory Management"],
      "starterCode": "#include <iostream>\n#include <memory>\nusing namespace std;\n\nint main() {\n    // Create shared_ptr\n    cout << *ptr;\n    return 0;\n}",
      "expectedOutput": "42"
    },
    {
      "title": "Memory Leak Check",
      "description": "Create a function that allocates memory but doesn't deallocate it (simulate leak).",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Memory Management"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nvoid leakMemory() {\n    // Allocate but don't free\n}\n\nint main() {\n    leakMemory();\n    cout << \"Function called\";\n    return 0;\n}",
      "expectedOutput": "Function called"
    },
    {
      "title": "Custom Deleter",
      "description": "Create a unique_ptr with a custom deleter that prints when memory is freed.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Memory Management"],
      "starterCode": "#include <iostream>\n#include <memory>\nusing namespace std;\n\nint main() {\n    // Define custom deleter\n    unique_ptr<int, decltype(deleter)> ptr(new int(100), deleter);\n    return 0;\n}",
      "expectedOutput": "Memory freed"
    },
    {
      "title": "Placement New",
      "description": "Use placement new to construct an integer in pre-allocated memory and print its value.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Memory Management"],
      "starterCode": "#include <iostream>\n#include <new>\nusing namespace std;\n\nint main() {\n    char buffer[sizeof(int)];\n    // Use placement new\n    cout << *p;\n    return 0;\n}",
      "expectedOutput": "99"
    },
    {
      "title": "Factorial Recursive",
      "description": "Implement factorial using recursion and calculate 5!.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Recursion"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define recursive function\n\nint main() {\n    cout << factorial(5);\n    return 0;\n}",
      "expectedOutput": "120"
    },
    {
      "title": "Fibonacci Sequence",
      "description": "Print the first 6 Fibonacci numbers using recursion.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Recursion"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define recursive function\n\nint main() {\n    for (int i = 0; i < 6; i++)\n        cout << fib(i) << \" \";\n    return 0;\n}",
      "expectedOutput": "0 1 1 2 3 5"
    },
    {
      "title": "Binary Search Recursive",
      "description": "Implement recursive binary search on a sorted array.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Recursion"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define recursive function\n\nint main() {\n    int arr[] = {2, 5, 8, 12, 16};\n    cout << binarySearch(arr, 0, 4, 12);\n    return 0;\n}",
      "expectedOutput": "3"
    },
    {
      "title": "Tower of Hanoi",
      "description": "Solve Tower of Hanoi for 3 disks and print the move sequence.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Recursion"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\n// Define recursive function\n\nint main() {\n    hanoi(3, 'A', 'C', 'B');\n    return 0;\n}",
      "expectedOutput": "A->C\nA->B\nC->B\nA->C\nB->A\nB->C\nA->C"
    },
    {
      "title": "Recursive List Sum",
      "description": "Calculate the sum of a linked list recursively.",
      "language": "Cplusplus",
      "defaultLanguage": "cpp",
      "judgeLanguageId": 54,
      "difficulty": "Advanced",
      "categories": ["Recursion"],
      "starterCode": "#include <iostream>\nusing namespace std;\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\n// Define recursive function\n\nint main() {\n    Node* head = new Node{1, new Node{2, new Node{3, nullptr}}};\n    cout << listSum(head);\n    return 0;\n}",
      "expectedOutput": "6"
    },
    {
      "title": "Print 1-10",
      "description": "Print numbers 1 through 10 using a for loop",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <stdio.h>\nint main() {\n  for(int i=1; i<=10; i++) printf(\"%d \", i);\n  return 0;\n}",
      "expectedOutput": "1 2 3 4 5 6 7 8 9 10"
    },
    {
      "title": "Sum Evens",
      "description": "Sum even numbers 1-20 using while",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int i=1, sum=0;\n  while(i<=20) {\n    if(i%2==0) sum+=i;\n    i++;\n  }\n  printf(\"%d\", sum);\n  return 0;\n}",
      "expectedOutput": "110"
    },
    {
      "title": "Multiplication Table",
      "description": "Print 5's table using do-while",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int i=1;\n  do {\n    printf(\"%d \", 5*i);\n    i++;\n  } while(i<=10);\n  return 0;\n}",
      "expectedOutput": "5 10 15 20 25 30 35 40 45 50"
    },
    {
      "title": "Countdown",
      "description": "Print 10 to 1 using for",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <stdio.h>\nint main() {\n  for(int i=10; i>=1; i--) printf(\"%d \", i);\n  return 0;\n}",
      "expectedOutput": "10 9 8 7 6 5 4 3 2 1"
    },
    {
      "title": "Print Asterisks",
      "description": "Print 5 * vertically",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "#include <stdio.h>\nint main() {\n  for(int i=0; i<5; i++) printf(\"*\\n\");\n  return 0;\n}",
      "expectedOutput": "*\n*\n*\n*\n*"
    },
    {
      "title": "Array Init",
      "description": "Create and print 5-int array",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Arrays"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int arr[5]={10,20,30,40,50};\n  for(int i=0; i<5; i++) printf(\"%d \", arr[i]);\n  return 0;\n}",
      "expectedOutput": "10 20 30 40 50"
    },
    {
      "title": "Find Max",
      "description": "Find max in array",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Arrays"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int arr[]={12,45,23,67,34};\n  int max=arr[0];\n  for(int i=1; i<5; i++) if(arr[i]>max) max=arr[i];\n  printf(\"%d\", max);\n  return 0;\n}",
      "expectedOutput": "67"
    },
    {
      "title": "Array Sum",
      "description": "Sum array elements",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Arrays"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int arr[]={1,2,3,4,5}, sum=0;\n  for(int i=0; i<5; i++) sum+=arr[i];\n  printf(\"%d\", sum);\n  return 0;\n}",
      "expectedOutput": "15"
    },
    {
      "title": "Reverse Array",
      "description": "Reverse and print array",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Arrays"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int arr[]={1,2,3,4,5};\n  for(int i=4; i>=0; i--) printf(\"%d \", arr[i]);\n  return 0;\n}",
      "expectedOutput": "5 4 3 2 1"
    },
    {
      "title": "Count Occurrences",
      "description": "Count target in array",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Arrays"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int arr[]={2,5,2,7,2,8}, target=2, count=0;\n  for(int i=0; i<6; i++) if(arr[i]==target) count++;\n  printf(\"%d\", count);\n  return 0;\n}",
      "expectedOutput": "3"
    },
    {
      "title": "Print Hello",
      "description": "Void function prints Hello",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <stdio.h>\nvoid greet() { printf(\"Hello\"); }\nint main() { greet(); return 0; }",
      "expectedOutput": "Hello"
    },
    {
      "title": "Add Numbers",
      "description": "Function returns sum",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <stdio.h>\nint add(int a, int b) { return a+b; }\nint main() { printf(\"%d\", add(5,3)); return 0; }",
      "expectedOutput": "8"
    },
    {
      "title": "Factorial",
      "description": "Recursive factorial",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <stdio.h>\nint fact(int n) { return (n<=1)?1:n*fact(n-1); }\nint main() { printf(\"%d\", fact(5)); return 0; }",
      "expectedOutput": "120"
    },
    {
      "title": "Is Even",
      "description": "Return 1 if even, 0 odd",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <stdio.h>\nint isEven(int n) { return n%2==0; }\nint main() { printf(\"%d\", isEven(4)); return 0; }",
      "expectedOutput": "1"
    },
    {
      "title": "Max of Two",
      "description": "Return larger number",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "#include <stdio.h>\nint max(int a, int b) { return (a>b)?a:b; }\nint main() { printf(\"%d\", max(7,12)); return 0; }",
      "expectedOutput": "12"
    },
    {
      "title": "Pointer Basics",
      "description": "Print value via pointer",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Pointers"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int num=42, *p=&num;\n  printf(\"%d\", *p);\n  return 0;\n}",
      "expectedOutput": "42"
    },
    {
      "title": "Swap with Pointers",
      "description": "Swap two ints using pointers",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Pointers"],
      "starterCode": "#include <stdio.h>\nvoid swap(int *a, int *b) { int t=*a; *a=*b; *b=t; }\nint main() {\n  int x=5, y=10;\n  swap(&x,&y);\n  printf(\"%d %d\",x,y);\n  return 0;\n}",
      "expectedOutput": "10 5"
    },
    {
      "title": "Array via Pointer",
      "description": "Print array using pointer arithmetic",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Pointers"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int arr[3]={10,20,30}, *p=arr;\n  for(int i=0; i<3; i++) printf(\"%d \", *(p+i));\n  return 0;\n}",
      "expectedOutput": "10 20 30"
    },
    {
      "title": "String Pointer",
      "description": "Print string via pointer",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Pointers"],
      "starterCode": "#include <stdio.h>\nint main() {\n  char str[]=\"Hello\", *p=str;\n  while(*p) printf(\"%c\", *p++);\n  return 0;\n}",
      "expectedOutput": "Hello"
    },
    {
      "title": "Pointer to Pointer",
      "description": "Print value via double pointer",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Pointers"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int num=42, *p=&num, **pp=&p;\n  printf(\"%d\", **pp);\n  return 0;\n}",
      "expectedOutput": "42"
    },
    {
      "title": "Point Struct",
      "description": "Create and print Point struct",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <stdio.h>\nstruct Point { int x,y; };\nint main() {\n  struct Point p = {3,4};\n  printf(\"%d %d\", p.x, p.y);\n  return 0;\n}",
      "expectedOutput": "3 4"
    },
    {
      "title": "Rectangle Area",
      "description": "Calculate area using struct",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <stdio.h>\nstruct Rect { int w,h; };\nint main() {\n  struct Rect r = {5,3};\n  printf(\"%d\", r.w*r.h);\n  return 0;\n}",
      "expectedOutput": "15"
    },
    {
      "title": "Student Struct",
      "description": "Print student name and GPA",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <stdio.h>\nstruct Student { char name[20]; float gpa; };\nint main() {\n  struct Student s = {\"Alice\", 3.8};\n  printf(\"%s %.1f\", s.name, s.gpa);\n  return 0;\n}",
      "expectedOutput": "Alice 3.8"
    },
    {
      "title": "Nested Structs",
      "description": "Circle containing Point center",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <stdio.h>\nstruct Point { int x,y; };\nstruct Circle { struct Point center; int r; };\nint main() {\n  struct Circle c = {{2,5}, 10};\n  printf(\"%d %d\", c.center.x, c.center.y);\n  return 0;\n}",
      "expectedOutput": "2 5"
    },
    {
      "title": "Struct Array",
      "description": "Array of 3 Points",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Structs"],
      "starterCode": "#include <stdio.h>\nstruct Point { int x,y; };\nint main() {\n  struct Point pts[3] = {{1,2},{3,4},{5,6}};\n  for(int i=0; i<3; i++) printf(\"%d %d\\n\", pts[i].x, pts[i].y);\n  return 0;\n}",
      "expectedOutput": "1 2\n3 4\n5 6"
    },
    {
      "title": "Largest of Three",
      "description": "Find max of 3 numbers",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int a=5, b=10, c=7, max=a;\n  if(b>max) max=b;\n  if(c>max) max=c;\n  printf(\"%d\", max);\n  return 0;\n}",
      "expectedOutput": "10"
    },
    {
      "title": "Leap Year",
      "description": "Check if year is leap",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int year=2024;\n  if((year%4==0 && year%100!=0) || year%400==0) printf(\"Leap\");\n  else printf(\"Not leap\");\n  return 0;\n}",
      "expectedOutput": "Leap"
    },
    {
      "title": "Grade Calculator",
      "description": "Convert score to letter grade",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int score=85;\n  if(score>=90) printf(\"A\");\n  else if(score>=80) printf(\"B\");\n  else if(score>=70) printf(\"C\");\n  else printf(\"F\");\n  return 0;\n}",
      "expectedOutput": "B"
    },
    {
      "title": "Positive/Negative",
      "description": "Check number sign",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "#include <stdio.h>\nint main() {\n  int num=-5;\n  if(num>0) printf(\"Positive\");\n  else if(num<0) printf(\"Negative\");\n  else printf(\"Zero\");\n  return 0;\n}",
      "expectedOutput": "Negative"
    },
    {
      "title": "Vowel Check",
      "description": "Check if character is vowel",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "#include <stdio.h>\nint main() {\n  char c='e';\n  if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u') printf(\"Vowel\");\n  else printf(\"Consonant\");\n  return 0;\n}",
      "expectedOutput": "Vowel"
    },
    {
      "title": "Write to File",
      "description": "Write \"Hello\" to output.txt",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["File I/O"],
      "starterCode": "#include <stdio.h>\nint main() {\n  FILE *f = fopen(\"output.txt\",\"w\");\n  fprintf(f,\"Hello\");\n  fclose(f);\n  return 0;\n}",
      "expectedOutput": "(file output.txt created with content \"Hello\")"
    },
    {
      "title": "Read from File",
      "description": "Read first line from input.txt",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["File I/O"],
      "starterCode": "#include <stdio.h>\nint main() {\n  FILE *f = fopen(\"input.txt\",\"r\");\n  char line[100];\n  fgets(line,100,f);\n  printf(\"%s\",line);\n  fclose(f);\n  return 0;\n}",
      "expectedOutput": "(first line of input.txt)"
    },
    {
      "title": "Copy File",
      "description": "Copy input.txt to output.txt",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["File I/O"],
      "starterCode": "#include <stdio.h>\nint main() {\n  FILE *in=fopen(\"input.txt\",\"r\"), *out=fopen(\"output.txt\",\"w\");\n  char c;\n  while((c=fgetc(in))!=EOF) fputc(c,out);\n  fclose(in); fclose(out);\n  return 0;\n}",
      "expectedOutput": "(output.txt matches input.txt)"
    },
    {
      "title": "Count Lines",
      "description": "Count lines in a file",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["File I/O"],
      "starterCode": "#include <stdio.h>\nint main() {\n  FILE *f=fopen(\"input.txt\",\"r\");\n  int count=0; char c;\n  while((c=fgetc(f))!=EOF) if(c=='\\n') count++;\n  fclose(f);\n  printf(\"%d\",count);\n  return 0;\n}",
      "expectedOutput": "(number of lines in input.txt)"
    },
    {
      "title": "CSV Sum",
      "description": "Sum first column of numbers.csv",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["File I/O"],
      "starterCode": "#include <stdio.h>\nint main() {\n  FILE *f=fopen(\"numbers.csv\",\"r\");\n  int sum=0, num;\n  while(fscanf(f,\"%d,\",&num)==1) sum+=num;\n  fclose(f);\n  printf(\"%d\",sum);\n  return 0;\n}",
      "expectedOutput": "(sum of first column)"
    },
    {
      "title": "Dynamic Array",
      "description": "Allocate, fill, print int array",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Memory Allocation"],
      "starterCode": "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  int *arr = malloc(5*sizeof(int));\n  for(int i=0;i<5;i++) arr[i]=i+1;\n  for(int i=0;i<5;i++) printf(\"%d \",arr[i]);\n  free(arr);\n  return 0;\n}",
      "expectedOutput": "1 2 3 4 5"
    },
    {
      "title": "Resize Array",
      "description": "Reallocate array from 3 to 5 elements",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Memory Allocation"],
      "starterCode": "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  int *arr = malloc(3*sizeof(int));\n  arr[0]=1; arr[1]=2; arr[2]=3;\n  arr = realloc(arr,5*sizeof(int));\n  arr[3]=4; arr[4]=5;\n  for(int i=0;i<5;i++) printf(\"%d \",arr[i]);\n  free(arr);\n  return 0;\n}",
      "expectedOutput": "1 2 3 4 5"
    },
    {
      "title": "2D Dynamic Array",
      "description": "Create 2x3 dynamic array",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Memory Allocation"],
      "starterCode": "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  int **arr = malloc(2*sizeof(int*));\n  for(int i=0;i<2;i++) arr[i]=malloc(3*sizeof(int));\n  for(int i=0;i<2;i++) for(int j=0;j<3;j++) arr[i][j]=(i+1)*(j+1);\n  for(int i=0;i<2;i++) {\n    for(int j=0;j<3;j++) printf(\"%d \",arr[i][j]);\n    printf(\"\\n\");\n  }\n  for(int i=0;i<2;i++) free(arr[i]);\n  free(arr);\n  return 0;\n}",
      "expectedOutput": "1 2 3\n2 4 6"
    },
    {
      "title": "Memory Leak",
      "description": "Intentionally leak memory",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Memory Allocation"],
      "starterCode": "#include <stdio.h>\n#include <stdlib.h>\nint main() {\n  int *ptr = malloc(sizeof(int));\n  *ptr = 42;\n  printf(\"%d\",*ptr);\n  return 0;\n}",
      "expectedOutput": "42"
    },
    {
      "title": "Dynamic String",
      "description": "Allocate and print string",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Memory Allocation"],
      "starterCode": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nint main() {\n  char *str = malloc(6*sizeof(char));\n  strcpy(str,\"Hello\");\n  printf(\"%s\",str);\n  free(str);\n  return 0;\n}",
      "expectedOutput": "Hello"
    },
    {
      "title": "Define Constant",
      "description": "Use #define for PI",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Preprocessors"],
      "starterCode": "#include <stdio.h>\n#define PI 3.14159\nint main() {\n  printf(\"%.5f\",PI);\n  return 0;\n}",
      "expectedOutput": "3.14159"
    },
    {
      "title": "Macro Function",
      "description": "Create SQUARE macro",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Preprocessors"],
      "starterCode": "#include <stdio.h>\n#define SQUARE(x) ((x)*(x))\nint main() {\n  printf(\"%d\",SQUARE(5));\n  return 0;\n}",
      "expectedOutput": "25"
    },
    {
      "title": "Conditional Compilation",
      "description": "Use #ifdef to check DEBUG",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Preprocessors"],
      "starterCode": "#include <stdio.h>\n#define DEBUG 1\nint main() {\n  #ifdef DEBUG\n    printf(\"Debug mode\");\n  #else\n    printf(\"Release mode\");\n  #endif\n  return 0;\n}",
      "expectedOutput": "Debug mode"
    },
    {
      "title": "Include Guard",
      "description": "Prevent double inclusion",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Preprocessors"],
      "starterCode": "#include <stdio.h>\n#ifndef MY_HEADER\n#define MY_HEADER\n  int x = 42;\n#endif\nint main() {\n  printf(\"%d\",x);\n  return 0;\n}",
      "expectedOutput": "42"
    },
    {
      "title": "Stringify Operator",
      "description": "Use # to stringify variable",
      "language": "C",
      "defaultLanguage": "c",
      "judgeLanguageId": 50,
      "difficulty": "Advanced",
      "categories": ["Preprocessors"],
      "starterCode": "#include <stdio.h>\n#define STR(s) #s\nint main() {\n  printf(\"%s\",STR(Hello));\n  return 0;\n}",
      "expectedOutput": "Hello"
    },
    {
      "title": "Print Numbers 1-10",
      "description": "Print numbers 1 through 10 using a for loop",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        // Your loop here\n    }\n}",
      "expectedOutput": "1 2 3 4 5 6 7 8 9 10"
    },
    {
      "title": "Sum Even Numbers",
      "description": "Calculate sum of even numbers 1-20 using while",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        int sum = 0;\n        // Your loop here\n        Console.Write(sum);\n    }\n}",
      "expectedOutput": "110"
    },
    {
      "title": "Multiplication Table",
      "description": "Print 5's multiplication table using for",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        // Your loop here\n    }\n}",
      "expectedOutput": "5 10 15 20 25 30 35 40 45 50"
    },
    {
      "title": "Countdown",
      "description": "Print numbers 10 to 1 using do-while",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        // Your loop here\n    }\n}",
      "expectedOutput": "10 9 8 7 6 5 4 3 2 1"
    },
    {
      "title": "Print Asterisks",
      "description": "Print 5 asterisks vertically using foreach",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Loops"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        // Your loop here\n    }\n}",
      "expectedOutput": "*\n*\n*\n*\n*"
    },
    {
      "title": "Greet Function",
      "description": "Create a void function that prints 'Hello'",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "using System;\n\nclass Program {\n    // Define function here\n    \n    static void Main() {\n        Greet();\n    }\n}",
      "expectedOutput": "Hello"
    },
    {
      "title": "Add Numbers",
      "description": "Create a function that returns sum of two numbers",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "using System;\n\nclass Program {\n    // Define function here\n    \n    static void Main() {\n        Console.Write(Add(5, 3));\n    }\n}",
      "expectedOutput": "8"
    },
    {
      "title": "Factorial",
      "description": "Create recursive factorial function",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "using System;\n\nclass Program {\n    // Define function here\n    \n    static void Main() {\n        Console.Write(Factorial(5));\n    }\n}",
      "expectedOutput": "120"
    },
    {
      "title": "Is Even",
      "description": "Create function that checks if number is even",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "using System;\n\nclass Program {\n    // Define function here\n    \n    static void Main() {\n        Console.Write(IsEven(4));\n    }\n}",
      "expectedOutput": "True"
    },
    {
      "title": "Max of Two",
      "description": "Create function that returns larger number",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["Functions"],
      "starterCode": "using System;\n\nclass Program {\n    // Define function here\n    \n    static void Main() {\n        Console.Write(Max(7, 12));\n    }\n}",
      "expectedOutput": "12"
    },
    {
      "title": "Create Person Class",
      "description": "Define Person class with Name property and print it",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["OOP"],
      "starterCode": "using System;\n\n// Define class here\n\nclass Program {\n    static void Main() {\n        Person p = new Person(\"Alice\");\n        Console.Write(p.Name);\n    }\n}",
      "expectedOutput": "Alice"
    },
    {
      "title": "Bank Account",
      "description": "Create BankAccount class with Balance property",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["OOP"],
      "starterCode": "using System;\n\n// Define class here\n\nclass Program {\n    static void Main() {\n        BankAccount acc = new BankAccount(100);\n        Console.Write(acc.Balance);\n    }\n}",
      "expectedOutput": "100"
    },
    {
      "title": "Method in Class",
      "description": "Add Deposit method to BankAccount class",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["OOP"],
      "starterCode": "using System;\n\n// Define class here\n\nclass Program {\n    static void Main() {\n        BankAccount acc = new BankAccount(100);\n        acc.Deposit(50);\n        Console.Write(acc.Balance);\n    }\n}",
      "expectedOutput": "150"
    },
    {
      "title": "Constructor",
      "description": "Add constructor to Person class",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["OOP"],
      "starterCode": "using System;\n\n// Define class here\n\nclass Program {\n    static void Main() {\n        Person p = new Person(\"Bob\", 25);\n        Console.Write(p.Name + \" \" + p.Age);\n    }\n}",
      "expectedOutput": "Bob 25"
    },
    {
      "title": "Read-only Property",
      "description": "Create class with read-only Id property",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Beginner",
      "categories": ["OOP"],
      "starterCode": "using System;\n\n// Define class here\n\nclass Program {\n    static void Main() {\n        Product p = new Product(101);\n        Console.Write(p.Id);\n    }\n}",
      "expectedOutput": "101"
    },
    {
      "title": "List Operations",
      "description": "Create list of integers, add elements and print count",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Collections"],
      "starterCode": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    static void Main() {\n        List<int> numbers = new List<int> {1, 2, 3};\n        // Add elements and print count\n    }\n}",
      "expectedOutput": "5"
    },
    {
      "title": "Dictionary Lookup",
      "description": "Create dictionary and lookup value by key",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Collections"],
      "starterCode": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    static void Main() {\n        Dictionary<string, int> ages = new Dictionary<string, int>();\n        ages[\"Alice\"] = 25;\n        // Lookup and print Alice's age\n    }\n}",
      "expectedOutput": "25"
    },
    {
      "title": "LINQ Filter",
      "description": "Use LINQ to filter even numbers from list",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Collections"],
      "starterCode": "using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nclass Program {\n    static void Main() {\n        List<int> nums = new List<int> {1, 2, 3, 4, 5};\n        // LINQ query here\n        Console.Write(string.Join(\" \", evens));\n    }\n}",
      "expectedOutput": "2 4"
    },
    {
      "title": "Queue Operations",
      "description": "Demonstrate basic queue operations",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Collections"],
      "starterCode": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    static void Main() {\n        Queue<string> queue = new Queue<string>();\n        queue.Enqueue(\"first\");\n        // Complete queue operations\n        Console.Write(queue.Dequeue());\n    }\n}",
      "expectedOutput": "first"
    },
    {
      "title": "Sort List",
      "description": "Sort list of strings alphabetically",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Collections"],
      "starterCode": "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    static void Main() {\n        List<string> names = new List<string> {\"Zoe\", \"Alice\", \"Bob\"};\n        // Sort and print\n    }\n}",
      "expectedOutput": "Alice Bob Zoe"
    },
    {
      "title": "Largest of Three",
      "description": "Find maximum of three numbers",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        int a = 5, b = 10, c = 7;\n        // Find and print max\n    }\n}",
      "expectedOutput": "10"
    },
    {
      "title": "Leap Year",
      "description": "Check if year is leap year",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        int year = 2024;\n        // Check and print leap status\n    }\n}",
      "expectedOutput": "Leap"
    },
    {
      "title": "Grade Calculator",
      "description": "Convert score to letter grade",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        int score = 85;\n        // Determine and print grade\n    }\n}",
      "expectedOutput": "B"
    },
    {
      "title": "Number Sign",
      "description": "Check if number is positive, negative or zero",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        int num = -5;\n        // Check and print sign\n    }\n}",
      "expectedOutput": "Negative"
    },
    {
      "title": "Vowel Check",
      "description": "Check if character is vowel",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Intermediate",
      "categories": ["Conditionals"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        char c = 'e';\n        // Check and print vowel status\n    }\n}",
      "expectedOutput": "Vowel"
    },
  {
    "title": "Split CSV Line",
    "description": "Split a CSV line string and print each value",
    "language": "CSharp",
    "defaultLanguage": "csharp",
    "judgeLanguageId": 51,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        string line = \"Alice,25,Engineer\";\n        // Your code here\n    }\n}",
    "expectedOutput": "Alice\n25\nEngineer"
  },
  {
    "title": "Join Lines",
    "description": "Join multiple lines into one string with spaces",
    "language": "CSharp",
    "defaultLanguage": "csharp",
    "judgeLanguageId": 51,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        string[] lines = {\"First\", \"Second\", \"Third\"};\n        // Your code here\n    }\n}",
    "expectedOutput": "First Second Third"
  },
  {
    "title": "Simulate Line Count",
    "description": "Count number of strings in an array simulating lines",
    "language": "CSharp",
    "defaultLanguage": "csharp",
    "judgeLanguageId": 51,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        string[] lines = {\"Line1\", \"Line2\", \"Line3\"};\n        // Your code here\n    }\n}",
    "expectedOutput": "3"
  },
  {
    "title": "Filter Lines by Keyword",
    "description": "Print lines that contain the word 'error'",
    "language": "CSharp",
    "defaultLanguage": "csharp",
    "judgeLanguageId": 51,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        string[] logs = {\n            \"info: system started\",\n            \"error: failed to load\",\n            \"info: shutdown\",\n            \"error: disk full\"\n        };\n        // Your code here\n    }\n}",
    "expectedOutput": "error: failed to load\nerror: disk full"
  },
  {
    "title": "Parse CSV Numbers",
    "description": "Sum the numeric values from a simulated CSV string",
    "language": "CSharp",
    "defaultLanguage": "csharp",
    "judgeLanguageId": 51,
    "difficulty": "Intermediate",
    "categories": ["File I/O"],
    "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        string csv = \"10,20,30\";\n        // Your code here\n    }\n}",
    "expectedOutput": "60"
  },
  {
    "title": "Simple Delegate",
    "description": "Create and invoke a delegate",
    "language": "CSharp",
    "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Delegates"],
      "starterCode": "using System;\n\nclass Program {\n    delegate void MyDelegate(string s);\n    \n    static void Main() {\n        // Create and invoke delegate\n    }\n}",
      "expectedOutput": "Hello"
    },
    {
      "title": "Delegate as Parameter",
      "description": "Pass delegate as method parameter",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Delegates"],
      "starterCode": "using System;\n\nclass Program {\n    delegate int MathOp(int a, int b);\n    \n    static void Main() {\n        // Pass delegate and print result\n    }\n}",
      "expectedOutput": "15"
    },
    {
      "title": "Multicast Delegate",
      "description": "Combine multiple methods in one delegate",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Delegates"],
      "starterCode": "using System;\n\nclass Program {\n    delegate void MyDelegate();\n    \n    static void Main() {\n        // Create multicast delegate\n    }\n}",
      "expectedOutput": "First\nSecond"
    },
    {
      "title": "Func Delegate",
      "description": "Use built-in Func delegate",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Delegates"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        // Use Func delegate\n    }\n}",
      "expectedOutput": "8"
    },
    {
      "title": "Action Delegate",
      "description": "Use built-in Action delegate",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Delegates"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        // Use Action delegate\n    }\n}",
      "expectedOutput": "Hello"
    },
    {
      "title": "Basic Interface",
      "description": "Create and implement simple interface",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Interfaces"],
      "starterCode": "using System;\n\n// Define interface\n\nclass Program {\n    static void Main() {\n        // Implement and call\n    }\n}",
      "expectedOutput": "Drawing"
    },
    {
      "title": "Multiple Interfaces",
      "description": "Implement two interfaces in one class",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Interfaces"],
      "starterCode": "using System;\n\n// Define interfaces\n\nclass Program {\n    static void Main() {\n        // Implement and call\n    }\n}",
      "expectedOutput": "Fly\nSwim"
    },
    {
      "title": "Interface Inheritance",
      "description": "Create interface that inherits another",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Interfaces"],
      "starterCode": "using System;\n\n// Define interfaces\n\nclass Program {\n    static void Main() {\n        // Implement and call\n    }\n}",
      "expectedOutput": "Move\nAccelerate"
    },
    {
      "title": "Explicit Implementation",
      "description": "Implement interface members explicitly",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Interfaces"],
      "starterCode": "using System;\n\n// Define interface\n\nclass Program {\n    static void Main() {\n        // Implement explicitly and call\n    }\n}",
      "expectedOutput": "Explicit"
    },
    {
      "title": "Interface as Parameter",
      "description": "Pass interface as method parameter",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Interfaces"],
      "starterCode": "using System;\n\n// Define interface\n\nclass Program {\n    static void Main() {\n        // Pass interface implementation\n    }\n}",
      "expectedOutput": "Logged"
    },
    {
      "title": "Try-Catch",
      "description": "Handle divide by zero exception",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Exceptions"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        try {\n            int result = 10 / 0;\n        }\n        // Catch and print message\n    }\n}",
      "expectedOutput": "Divide by zero"
    },
    {
      "title": "Custom Exception",
      "description": "Create and throw custom exception",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Exceptions"],
      "starterCode": "using System;\n\n// Define custom exception\n\nclass Program {\n    static void Main() {\n        try {\n            // Throw custom exception\n        }\n        catch (MyException ex) {\n            Console.Write(ex.Message);\n        }\n    }\n}",
      "expectedOutput": "Custom error"
    },
    {
      "title": "Finally Block",
      "description": "Demonstrate finally block execution",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Exceptions"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        try {\n            // Code that might throw\n        }\n        finally {\n            Console.Write(\"Cleanup\");\n        }\n    }\n}",
      "expectedOutput": "Cleanup"
    },
    {
      "title": "Multiple Catch",
      "description": "Handle different exception types",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Exceptions"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        try {\n            // Code that might throw\n        }\n        // Multiple catch blocks\n    }\n}",
      "expectedOutput": "Null reference"
    },
    {
      "title": "Exception Filters",
      "description": "Use when to filter exceptions",
      "language": "CSharp",
      "defaultLanguage": "csharp",
      "judgeLanguageId": 51,
      "difficulty": "Advanced",
      "categories": ["Exceptions"],
      "starterCode": "using System;\n\nclass Program {\n    static void Main() {\n        try {\n            // Throw with specific condition\n        }\n        catch (Exception ex) when (ex.Message.Contains(\"specific\")) {\n            Console.Write(\"Filtered\");\n        }\n    }\n}",
      "expectedOutput": "Filtered"
    }
]
